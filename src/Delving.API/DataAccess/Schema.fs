// This code was generated by `SqlHydra.Npgsql` -- v2.5.1.
namespace Delving.API.DataAccess.Schema

open SqlHydra
open SqlHydra.Query.Table

[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

    type NullableObjectColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> null
                | o -> (getter o) |> unbox

    type NullableValueColumn<'T, 'Reader when 'T : struct and 'T : (new : unit -> 'T) and 'T :> System.ValueType and 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> System.Nullable<'T>()
                | o -> System.Nullable<'T> (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module ``public`` =
    [<CLIMutable>]
    type AccountDetails =
        { [<ProviderDbType("Numeric")>]
          AccountNumber: decimal
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Text")>]
          AccountTypeId: string
          [<ProviderDbType("Text")>]
          ServiceTypeId: string
          [<ProviderDbType("Text")>]
          Status: string
          [<ProviderDbType("Numeric")>]
          CustomerNumber: decimal
          [<ProviderDbType("Text")>]
          FirstName: Option<string>
          [<ProviderDbType("Text")>]
          LastName: Option<string>
          [<ProviderDbType("Text")>]
          SubscriberId: Option<string>
          [<ProviderDbType("Text")>]
          ServiceName: Option<string>
          [<ProviderDbType("Text")>]
          AreaCode: string
          [<ProviderDbType("Text")>]
          Exchange: string
          [<ProviderDbType("Text")>]
          LineNumber: string
          [<ProviderDbType("Numeric")>]
          HouseId: decimal
          [<ProviderDbType("Numeric")>]
          StreetNumber: decimal
          [<ProviderDbType("Text")>]
          StreetName: Option<string>
          [<ProviderDbType("Text")>]
          City: Option<string> }

    let AccountDetails = table<AccountDetails>

    [<CLIMutable>]
    type CustomerService =
        { [<ProviderDbType("Integer")>]
          Id: int
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Integer")>]
          StructureId: int
          [<ProviderDbType("Text")>]
          CustomerServiceNumber: string
          [<ProviderDbType("Text")>]
          AreaCode: Option<string>
          [<ProviderDbType("Text")>]
          Exchange: Option<string>
          [<ProviderDbType("Text")>]
          LineNumber: Option<string> }

    let CustomerService = table<CustomerService>

    [<CLIMutable>]
    type Equipment =
        { [<ProviderDbType("Integer")>]
          Id: int
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Integer")>]
          LinecardId: Option<int>
          [<ProviderDbType("Integer")>]
          LinecardElementId: Option<int>
          [<ProviderDbType("Integer")>]
          CustomerServiceId: Option<int>
          [<ProviderDbType("Text")>]
          Category: string
          [<ProviderDbType("Text")>]
          Type: Option<string>
          [<ProviderDbType("Text")>]
          Name: string
          [<ProviderDbType("Integer")>]
          StatusId: int
          [<ProviderDbType("Text")>]
          Status: string
          [<ProviderDbType("Integer")>]
          CentralOfficeId: Option<int>
          [<ProviderDbType("Text")>]
          CentralOfficeName: Option<string> }

    let Equipment = table<Equipment>

    [<CLIMutable>]
    type HouseDirections =
        { [<ProviderDbType("Numeric")>]
          HouseId: decimal
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Numeric")>]
          Sequence: decimal
          [<ProviderDbType("Text")>]
          DrivingDirections: Option<string> }

    let HouseDirections = table<HouseDirections>

    [<CLIMutable>]
    type Import =
        { [<ProviderDbType("Uuid")>]
          Id: System.Guid
          [<ProviderDbType("Timestamp")>]
          StartedAt: System.DateTime
          [<ProviderDbType("Timestamp")>]
          CompletedAt: Option<System.DateTime>
          [<ProviderDbType("Text")>]
          ErrorMessage: Option<string>
          [<ProviderDbType("Boolean")>]
          IsLatest: bool }

    let Import = table<Import>

    [<CLIMutable>]
    type Linecard =
        { [<ProviderDbType("Integer")>]
          Id: int
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Integer")>]
          CustomerServiceId: Option<int>
          [<ProviderDbType("Integer")>]
          StructureId: int
          [<ProviderDbType("Integer")>]
          LinecardElementId: int
          [<ProviderDbType("Integer")>]
          LinecardSeq: int
          [<ProviderDbType("Integer")>]
          StatusId: int
          [<ProviderDbType("Text")>]
          Status: string
          [<ProviderDbType("Integer")>]
          CentralOfficeId: Option<int>
          [<ProviderDbType("Text")>]
          CentralOfficeName: Option<string> }

    let Linecard = table<Linecard>

    [<CLIMutable>]
    type Structure =
        { [<ProviderDbType("Integer")>]
          Id: int
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Numeric")>]
          HouseId: Option<decimal> }

    let Structure = table<Structure>

    [<CLIMutable>]
    type Terminal =
        { [<ProviderDbType("Integer")>]
          Id: int
          [<ProviderDbType("Uuid")>]
          ImportId: System.Guid
          [<ProviderDbType("Integer")>]
          LoopLength: int
          [<ProviderDbType("Integer")>]
          PrePostLoopLength: int }

    let Terminal = table<Terminal>

    [<CLIMutable>]
    type VersionInfo =
        { [<ProviderDbType("Bigint")>]
          Version: int64
          [<ProviderDbType("Timestamp")>]
          AppliedOn: Option<System.DateTime>
          [<ProviderDbType("Varchar")>]
          Description: Option<string> }

    let VersionInfo = table<VersionInfo>

    [<CLIMutable>]
    type migration =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Varchar")>]
          name: string
          [<ProviderDbType("Bigint")>]
          timestamp: int64 }

    let migration = table<migration>

    module Readers =
        type AccountDetailsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "AccountNumber")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.AccountTypeId = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountTypeId")
            member __.ServiceTypeId = RequiredColumn(reader, getOrdinal, reader.GetString, "ServiceTypeId")
            member __.Status = RequiredColumn(reader, getOrdinal, reader.GetString, "Status")
            member __.CustomerNumber = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CustomerNumber")
            member __.FirstName = OptionColumn(reader, getOrdinal, reader.GetString, "FirstName")
            member __.LastName = OptionColumn(reader, getOrdinal, reader.GetString, "LastName")
            member __.SubscriberId = OptionColumn(reader, getOrdinal, reader.GetString, "SubscriberId")
            member __.ServiceName = OptionColumn(reader, getOrdinal, reader.GetString, "ServiceName")
            member __.AreaCode = RequiredColumn(reader, getOrdinal, reader.GetString, "AreaCode")
            member __.Exchange = RequiredColumn(reader, getOrdinal, reader.GetString, "Exchange")
            member __.LineNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "LineNumber")
            member __.HouseId = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "HouseId")
            member __.StreetNumber = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StreetNumber")
            member __.StreetName = OptionColumn(reader, getOrdinal, reader.GetString, "StreetName")
            member __.City = OptionColumn(reader, getOrdinal, reader.GetString, "City")

            member __.Read() =
                { AccountNumber = __.AccountNumber.Read()
                  ImportId = __.ImportId.Read()
                  AccountTypeId = __.AccountTypeId.Read()
                  ServiceTypeId = __.ServiceTypeId.Read()
                  Status = __.Status.Read()
                  CustomerNumber = __.CustomerNumber.Read()
                  FirstName = __.FirstName.Read()
                  LastName = __.LastName.Read()
                  SubscriberId = __.SubscriberId.Read()
                  ServiceName = __.ServiceName.Read()
                  AreaCode = __.AreaCode.Read()
                  Exchange = __.Exchange.Read()
                  LineNumber = __.LineNumber.Read()
                  HouseId = __.HouseId.Read()
                  StreetNumber = __.StreetNumber.Read()
                  StreetName = __.StreetName.Read()
                  City = __.City.Read() }
                : AccountDetails

            member __.ReadIfNotNull() =
                if __.AccountNumber.IsNull() then None else Some(__.Read())

        type CustomerServiceReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.StructureId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StructureId")
            member __.CustomerServiceNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "CustomerServiceNumber")
            member __.AreaCode = OptionColumn(reader, getOrdinal, reader.GetString, "AreaCode")
            member __.Exchange = OptionColumn(reader, getOrdinal, reader.GetString, "Exchange")
            member __.LineNumber = OptionColumn(reader, getOrdinal, reader.GetString, "LineNumber")

            member __.Read() =
                { Id = __.Id.Read()
                  ImportId = __.ImportId.Read()
                  StructureId = __.StructureId.Read()
                  CustomerServiceNumber = __.CustomerServiceNumber.Read()
                  AreaCode = __.AreaCode.Read()
                  Exchange = __.Exchange.Read()
                  LineNumber = __.LineNumber.Read() }
                : CustomerService

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type EquipmentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.LinecardId = OptionColumn(reader, getOrdinal, reader.GetInt32, "LinecardId")
            member __.LinecardElementId = OptionColumn(reader, getOrdinal, reader.GetInt32, "LinecardElementId")
            member __.CustomerServiceId = OptionColumn(reader, getOrdinal, reader.GetInt32, "CustomerServiceId")
            member __.Category = RequiredColumn(reader, getOrdinal, reader.GetString, "Category")
            member __.Type = OptionColumn(reader, getOrdinal, reader.GetString, "Type")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.StatusId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StatusId")
            member __.Status = RequiredColumn(reader, getOrdinal, reader.GetString, "Status")
            member __.CentralOfficeId = OptionColumn(reader, getOrdinal, reader.GetInt32, "CentralOfficeId")
            member __.CentralOfficeName = OptionColumn(reader, getOrdinal, reader.GetString, "CentralOfficeName")

            member __.Read() =
                { Id = __.Id.Read()
                  ImportId = __.ImportId.Read()
                  LinecardId = __.LinecardId.Read()
                  LinecardElementId = __.LinecardElementId.Read()
                  CustomerServiceId = __.CustomerServiceId.Read()
                  Category = __.Category.Read()
                  Type = __.Type.Read()
                  Name = __.Name.Read()
                  StatusId = __.StatusId.Read()
                  Status = __.Status.Read()
                  CentralOfficeId = __.CentralOfficeId.Read()
                  CentralOfficeName = __.CentralOfficeName.Read() }
                : Equipment

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type HouseDirectionsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.HouseId = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "HouseId")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.Sequence = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Sequence")
            member __.DrivingDirections = OptionColumn(reader, getOrdinal, reader.GetString, "DrivingDirections")

            member __.Read() =
                { HouseId = __.HouseId.Read()
                  ImportId = __.ImportId.Read()
                  Sequence = __.Sequence.Read()
                  DrivingDirections = __.DrivingDirections.Read() }
                : HouseDirections

            member __.ReadIfNotNull() =
                if __.HouseId.IsNull() then None else Some(__.Read())

        type ImportReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
            member __.StartedAt = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartedAt")
            member __.CompletedAt = OptionColumn(reader, getOrdinal, reader.GetDateTime, "CompletedAt")
            member __.ErrorMessage = OptionColumn(reader, getOrdinal, reader.GetString, "ErrorMessage")
            member __.IsLatest = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsLatest")

            member __.Read() =
                { Id = __.Id.Read()
                  StartedAt = __.StartedAt.Read()
                  CompletedAt = __.CompletedAt.Read()
                  ErrorMessage = __.ErrorMessage.Read()
                  IsLatest = __.IsLatest.Read() }
                : Import

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type LinecardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.CustomerServiceId = OptionColumn(reader, getOrdinal, reader.GetInt32, "CustomerServiceId")
            member __.StructureId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StructureId")
            member __.LinecardElementId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "LinecardElementId")
            member __.LinecardSeq = RequiredColumn(reader, getOrdinal, reader.GetInt32, "LinecardSeq")
            member __.StatusId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StatusId")
            member __.Status = RequiredColumn(reader, getOrdinal, reader.GetString, "Status")
            member __.CentralOfficeId = OptionColumn(reader, getOrdinal, reader.GetInt32, "CentralOfficeId")
            member __.CentralOfficeName = OptionColumn(reader, getOrdinal, reader.GetString, "CentralOfficeName")

            member __.Read() =
                { Id = __.Id.Read()
                  ImportId = __.ImportId.Read()
                  CustomerServiceId = __.CustomerServiceId.Read()
                  StructureId = __.StructureId.Read()
                  LinecardElementId = __.LinecardElementId.Read()
                  LinecardSeq = __.LinecardSeq.Read()
                  StatusId = __.StatusId.Read()
                  Status = __.Status.Read()
                  CentralOfficeId = __.CentralOfficeId.Read()
                  CentralOfficeName = __.CentralOfficeName.Read() }
                : Linecard

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type StructureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.HouseId = OptionColumn(reader, getOrdinal, reader.GetDecimal, "HouseId")

            member __.Read() =
                { Id = __.Id.Read()
                  ImportId = __.ImportId.Read()
                  HouseId = __.HouseId.Read() }
                : Structure

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type TerminalReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.ImportId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ImportId")
            member __.LoopLength = RequiredColumn(reader, getOrdinal, reader.GetInt32, "LoopLength")
            member __.PrePostLoopLength = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PrePostLoopLength")

            member __.Read() =
                { Id = __.Id.Read()
                  ImportId = __.ImportId.Read()
                  LoopLength = __.LoopLength.Read()
                  PrePostLoopLength = __.PrePostLoopLength.Read() }
                : Terminal

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type VersionInfoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Version = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Version")
            member __.AppliedOn = OptionColumn(reader, getOrdinal, reader.GetDateTime, "AppliedOn")
            member __.Description = OptionColumn(reader, getOrdinal, reader.GetString, "Description")

            member __.Read() =
                { Version = __.Version.Read()
                  AppliedOn = __.AppliedOn.Read()
                  Description = __.Description.Read() }
                : VersionInfo

            member __.ReadIfNotNull() =
                if __.Version.IsNull() then None else Some(__.Read())

        type migrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.timestamp = RequiredColumn(reader, getOrdinal, reader.GetInt64, "timestamp")

            member __.Read() =
                { id = __.id.Read()
                  name = __.name.Read()
                  timestamp = __.timestamp.Read() }
                : migration

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal tableType =
        let fieldNames = 
            FSharp.Reflection.FSharpType.GetRecordFields(tableType)
            |> Array.map _.Name

        let dictionary = 
            [| 0 .. reader.FieldCount - 1 |] 
            |> Array.map (fun i -> reader.GetName(i), i)
            |> Array.sortBy snd
            |> Array.skip accFieldCount
            |> Array.filter (fun (name, _) -> Array.contains name fieldNames)
            |> Array.take fieldNames.Length
            |> dict
        accFieldCount <- accFieldCount + fieldNames.Length
        fun col -> dictionary.Item col
        
    let lazypublicAccountDetails = lazy (``public``.Readers.AccountDetailsReader(reader, buildGetOrdinal typeof<``public``.AccountDetails>))
    let lazypublicCustomerService = lazy (``public``.Readers.CustomerServiceReader(reader, buildGetOrdinal typeof<``public``.CustomerService>))
    let lazypublicEquipment = lazy (``public``.Readers.EquipmentReader(reader, buildGetOrdinal typeof<``public``.Equipment>))
    let lazypublicHouseDirections = lazy (``public``.Readers.HouseDirectionsReader(reader, buildGetOrdinal typeof<``public``.HouseDirections>))
    let lazypublicImport = lazy (``public``.Readers.ImportReader(reader, buildGetOrdinal typeof<``public``.Import>))
    let lazypublicLinecard = lazy (``public``.Readers.LinecardReader(reader, buildGetOrdinal typeof<``public``.Linecard>))
    let lazypublicStructure = lazy (``public``.Readers.StructureReader(reader, buildGetOrdinal typeof<``public``.Structure>))
    let lazypublicTerminal = lazy (``public``.Readers.TerminalReader(reader, buildGetOrdinal typeof<``public``.Terminal>))
    let lazypublicVersionInfo = lazy (``public``.Readers.VersionInfoReader(reader, buildGetOrdinal typeof<``public``.VersionInfo>))
    let lazypublicmigration = lazy (``public``.Readers.migrationReader(reader, buildGetOrdinal typeof<``public``.migration>))
    member __.``public.AccountDetails`` = lazypublicAccountDetails.Value
    member __.``public.CustomerService`` = lazypublicCustomerService.Value
    member __.``public.Equipment`` = lazypublicEquipment.Value
    member __.``public.HouseDirections`` = lazypublicHouseDirections.Value
    member __.``public.Import`` = lazypublicImport.Value
    member __.``public.Linecard`` = lazypublicLinecard.Value
    member __.``public.Structure`` = lazypublicStructure.Value
    member __.``public.Terminal`` = lazypublicTerminal.Value
    member __.``public.VersionInfo`` = lazypublicVersionInfo.Value
    member __.``public.migration`` = lazypublicmigration.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "public.AccountDetails", false -> __.``public.AccountDetails``.Read >> box
        | "public.AccountDetails", true -> __.``public.AccountDetails``.ReadIfNotNull >> box
        | "public.CustomerService", false -> __.``public.CustomerService``.Read >> box
        | "public.CustomerService", true -> __.``public.CustomerService``.ReadIfNotNull >> box
        | "public.Equipment", false -> __.``public.Equipment``.Read >> box
        | "public.Equipment", true -> __.``public.Equipment``.ReadIfNotNull >> box
        | "public.HouseDirections", false -> __.``public.HouseDirections``.Read >> box
        | "public.HouseDirections", true -> __.``public.HouseDirections``.ReadIfNotNull >> box
        | "public.Import", false -> __.``public.Import``.Read >> box
        | "public.Import", true -> __.``public.Import``.ReadIfNotNull >> box
        | "public.Linecard", false -> __.``public.Linecard``.Read >> box
        | "public.Linecard", true -> __.``public.Linecard``.ReadIfNotNull >> box
        | "public.Structure", false -> __.``public.Structure``.Read >> box
        | "public.Structure", true -> __.``public.Structure``.ReadIfNotNull >> box
        | "public.Terminal", false -> __.``public.Terminal``.Read >> box
        | "public.Terminal", true -> __.``public.Terminal``.ReadIfNotNull >> box
        | "public.VersionInfo", false -> __.``public.VersionInfo``.Read >> box
        | "public.VersionInfo", true -> __.``public.VersionInfo``.ReadIfNotNull >> box
        | "public.migration", false -> __.``public.migration``.Read >> box
        | "public.migration", true -> __.``public.migration``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool, isNullable: bool) =
        let wrapValue get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            elif isNullable then (if reader.IsDBNull ord then System.Nullable() else get ord |> System.Nullable) |> box
            else get ord |> box

        let wrapRef get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box
        
        if t = typedefof<bool> then Some(wrapValue reader.GetBoolean)
        elif t = typedefof<bool[]> then Some(wrapRef reader.GetFieldValue<bool[]>)
        elif t = typedefof<int16> then Some(wrapValue reader.GetInt16)
        elif t = typedefof<int16[]> then Some(wrapRef reader.GetFieldValue<int16[]>)
        elif t = typedefof<int> then Some(wrapValue reader.GetInt32)
        elif t = typedefof<int[]> then Some(wrapRef reader.GetFieldValue<int[]>)
        elif t = typedefof<int64> then Some(wrapValue reader.GetInt64)
        elif t = typedefof<int64[]> then Some(wrapRef reader.GetFieldValue<int64[]>)
        elif t = typedefof<double> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<double[]> then Some(wrapRef reader.GetFieldValue<double[]>)
        elif t = typedefof<decimal> then Some(wrapValue reader.GetDecimal)
        elif t = typedefof<decimal[]> then Some(wrapRef reader.GetFieldValue<decimal[]>)
        elif t = typedefof<string> then Some(wrapRef reader.GetString)
        elif t = typedefof<string[]> then Some(wrapRef reader.GetFieldValue<string[]>)
        elif t = typedefof<System.Guid> then Some(wrapValue reader.GetGuid)
        elif t = typedefof<System.Guid[]> then Some(wrapRef reader.GetFieldValue<System.Guid[]>)
        elif t = typedefof<System.TimeSpan> then Some(wrapRef reader.GetTimeSpan)
        elif t = typedefof<System.TimeSpan[]> then Some(wrapRef reader.GetFieldValue<System.TimeSpan[]>)
        elif t = typedefof<System.DateOnly> then Some(wrapValue reader.GetDateOnly)
        elif t = typedefof<System.DateOnly[]> then Some(wrapRef reader.GetFieldValue<System.DateOnly[]>)
        elif t = typedefof<System.TimeOnly> then Some(wrapValue reader.GetTimeOnly)
        elif t = typedefof<System.TimeOnly[]> then Some(wrapRef reader.GetFieldValue<System.TimeOnly[]>)
        elif t = typedefof<System.DateTime> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateTime[]> then Some(wrapRef reader.GetFieldValue<System.DateTime[]>)
        elif t = typedefof<System.DateTimeOffset> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateTimeOffset[]> then Some(wrapRef reader.GetFieldValue<System.DateTimeOffset[]>)
        elif t = typedefof<byte[]> then Some(wrapRef reader.GetFieldValue<byte[]>)
        elif t = typedefof<char> then Some(wrapRef reader.GetChar)
        elif t = typedefof<char[]> then Some(wrapRef reader.GetFieldValue<char[]>)
        elif t = typedefof<float> then Some(wrapRef reader.GetFloat)
        elif t = typedefof<float[]> then Some(wrapRef reader.GetFieldValue<float[]>)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt, isNullable = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> then t.GenericTypeArguments[0], true, false
                elif t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<System.Nullable<_>> then t.GenericTypeArguments[0], false, true
                else t, false, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt, isNullable) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
