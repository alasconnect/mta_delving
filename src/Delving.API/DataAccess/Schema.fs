// This code was generated by `SqlHydra.Npgsql` -- v2.5.1.
namespace Delving.API.DataAccess.Schema

open SqlHydra
open SqlHydra.Query.Table

[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

    type NullableObjectColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> null
                | o -> (getter o) |> unbox

    type NullableValueColumn<'T, 'Reader when 'T : struct and 'T : (new : unit -> 'T) and 'T :> System.ValueType and 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> System.Nullable<'T>()
                | o -> System.Nullable<'T> (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module ``public`` =
    [<CLIMutable>]
    type VersionInfo =
        { [<ProviderDbType("Bigint")>]
          Version: int64
          [<ProviderDbType("Timestamp")>]
          AppliedOn: Option<System.DateTime>
          [<ProviderDbType("Varchar")>]
          Description: Option<string> }

    let VersionInfo = table<VersionInfo>

    [<CLIMutable>]
    type account_details =
        { [<ProviderDbType("Numeric")>]
          account_number: decimal
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Char")>]
          account_type_id: string
          [<ProviderDbType("Char")>]
          service_type_id: string
          [<ProviderDbType("Varchar")>]
          status: string
          [<ProviderDbType("Numeric")>]
          customer_number: decimal
          [<ProviderDbType("Varchar")>]
          first_name: string
          [<ProviderDbType("Varchar")>]
          last_name: string
          [<ProviderDbType("Varchar")>]
          subscriber_id: string
          [<ProviderDbType("Varchar")>]
          service_name: string
          [<ProviderDbType("Char")>]
          area_code: string
          [<ProviderDbType("Char")>]
          exchange: string
          [<ProviderDbType("Char")>]
          line_number: string
          [<ProviderDbType("Numeric")>]
          house_id: decimal
          [<ProviderDbType("Numeric")>]
          street_number: decimal
          [<ProviderDbType("Varchar")>]
          street_name: string
          [<ProviderDbType("Varchar")>]
          city: string }

    let account_details = table<account_details>

    [<CLIMutable>]
    type customer_service =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Integer")>]
          structure_id: int
          [<ProviderDbType("Varchar")>]
          customer_service_number: string
          [<ProviderDbType("Numeric")>]
          commv_account_number: decimal
          [<ProviderDbType("Char")>]
          area_code: string
          [<ProviderDbType("Char")>]
          exchange: string
          [<ProviderDbType("Char")>]
          line_number: string }

    let customer_service = table<customer_service>

    [<CLIMutable>]
    type equipment =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Integer")>]
          linecard_id: Option<int>
          [<ProviderDbType("Integer")>]
          linecard_element_id: Option<int>
          [<ProviderDbType("Varchar")>]
          category: string
          [<ProviderDbType("Varchar")>]
          ``type``: string
          [<ProviderDbType("Varchar")>]
          name: string
          [<ProviderDbType("Integer")>]
          status_id: int
          [<ProviderDbType("Varchar")>]
          status: string
          [<ProviderDbType("Integer")>]
          central_office_id: Option<int>
          [<ProviderDbType("Char")>]
          central_office_name: string }

    let equipment = table<equipment>

    [<CLIMutable>]
    type house_directions =
        { [<ProviderDbType("Numeric")>]
          house_id: decimal
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Varchar")>]
          driving_directions: string }

    let house_directions = table<house_directions>

    [<CLIMutable>]
    type import =
        { [<ProviderDbType("Uuid")>]
          id: System.Guid
          [<ProviderDbType("TimestampTz")>]
          started_at: System.DateTime
          [<ProviderDbType("TimestampTz")>]
          completed_at: Option<System.DateTime>
          [<ProviderDbType("Varchar")>]
          error_message: Option<string>
          [<ProviderDbType("Boolean")>]
          is_latest: bool }

    let import = table<import>

    [<CLIMutable>]
    type linecard =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Integer")>]
          customer_service_id: Option<int>
          [<ProviderDbType("Integer")>]
          structure_id: int
          [<ProviderDbType("Integer")>]
          linecard_element_id: int
          [<ProviderDbType("Integer")>]
          linecard_seq: int
          [<ProviderDbType("Boolean")>]
          is_bonded: bool
          [<ProviderDbType("Boolean")>]
          is_left_in: bool
          [<ProviderDbType("Integer")>]
          status_id: int
          [<ProviderDbType("Varchar")>]
          status: string
          [<ProviderDbType("Integer")>]
          central_office_id: Option<int>
          [<ProviderDbType("Char")>]
          central_office_name: string }

    let linecard = table<linecard>

    [<CLIMutable>]
    type migration =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Varchar")>]
          name: string
          [<ProviderDbType("Bigint")>]
          timestamp: int64 }

    let migration = table<migration>

    [<CLIMutable>]
    type structure =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Numeric")>]
          house_id: Option<decimal> }

    let structure = table<structure>

    [<CLIMutable>]
    type terminal =
        { [<ProviderDbType("Integer")>]
          id: int
          [<ProviderDbType("Uuid")>]
          import_id: System.Guid
          [<ProviderDbType("Integer")>]
          loop_length: int
          [<ProviderDbType("Integer")>]
          pre_post_loop_length: int }

    let terminal = table<terminal>

    module Readers =
        type VersionInfoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.Version = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Version")
            member __.AppliedOn = OptionColumn(reader, getOrdinal, reader.GetDateTime, "AppliedOn")
            member __.Description = OptionColumn(reader, getOrdinal, reader.GetString, "Description")

            member __.Read() =
                { Version = __.Version.Read()
                  AppliedOn = __.AppliedOn.Read()
                  Description = __.Description.Read() }
                : VersionInfo

            member __.ReadIfNotNull() =
                if __.Version.IsNull() then None else Some(__.Read())

        type account_detailsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.account_number = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "account_number")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.account_type_id = RequiredColumn(reader, getOrdinal, reader.GetString, "account_type_id")
            member __.service_type_id = RequiredColumn(reader, getOrdinal, reader.GetString, "service_type_id")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetString, "status")
            member __.customer_number = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "customer_number")
            member __.first_name = RequiredColumn(reader, getOrdinal, reader.GetString, "first_name")
            member __.last_name = RequiredColumn(reader, getOrdinal, reader.GetString, "last_name")
            member __.subscriber_id = RequiredColumn(reader, getOrdinal, reader.GetString, "subscriber_id")
            member __.service_name = RequiredColumn(reader, getOrdinal, reader.GetString, "service_name")
            member __.area_code = RequiredColumn(reader, getOrdinal, reader.GetString, "area_code")
            member __.exchange = RequiredColumn(reader, getOrdinal, reader.GetString, "exchange")
            member __.line_number = RequiredColumn(reader, getOrdinal, reader.GetString, "line_number")
            member __.house_id = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "house_id")
            member __.street_number = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "street_number")
            member __.street_name = RequiredColumn(reader, getOrdinal, reader.GetString, "street_name")
            member __.city = RequiredColumn(reader, getOrdinal, reader.GetString, "city")

            member __.Read() =
                { account_number = __.account_number.Read()
                  import_id = __.import_id.Read()
                  account_type_id = __.account_type_id.Read()
                  service_type_id = __.service_type_id.Read()
                  status = __.status.Read()
                  customer_number = __.customer_number.Read()
                  first_name = __.first_name.Read()
                  last_name = __.last_name.Read()
                  subscriber_id = __.subscriber_id.Read()
                  service_name = __.service_name.Read()
                  area_code = __.area_code.Read()
                  exchange = __.exchange.Read()
                  line_number = __.line_number.Read()
                  house_id = __.house_id.Read()
                  street_number = __.street_number.Read()
                  street_name = __.street_name.Read()
                  city = __.city.Read() }
                : account_details

            member __.ReadIfNotNull() =
                if __.account_number.IsNull() then None else Some(__.Read())

        type customer_serviceReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.structure_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "structure_id")
            member __.customer_service_number = RequiredColumn(reader, getOrdinal, reader.GetString, "customer_service_number")
            member __.commv_account_number = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "commv_account_number")
            member __.area_code = RequiredColumn(reader, getOrdinal, reader.GetString, "area_code")
            member __.exchange = RequiredColumn(reader, getOrdinal, reader.GetString, "exchange")
            member __.line_number = RequiredColumn(reader, getOrdinal, reader.GetString, "line_number")

            member __.Read() =
                { id = __.id.Read()
                  import_id = __.import_id.Read()
                  structure_id = __.structure_id.Read()
                  customer_service_number = __.customer_service_number.Read()
                  commv_account_number = __.commv_account_number.Read()
                  area_code = __.area_code.Read()
                  exchange = __.exchange.Read()
                  line_number = __.line_number.Read() }
                : customer_service

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type equipmentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.linecard_id = OptionColumn(reader, getOrdinal, reader.GetInt32, "linecard_id")
            member __.linecard_element_id = OptionColumn(reader, getOrdinal, reader.GetInt32, "linecard_element_id")
            member __.category = RequiredColumn(reader, getOrdinal, reader.GetString, "category")
            member __.``type`` = RequiredColumn(reader, getOrdinal, reader.GetString, "type")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.status_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "status_id")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetString, "status")
            member __.central_office_id = OptionColumn(reader, getOrdinal, reader.GetInt32, "central_office_id")
            member __.central_office_name = RequiredColumn(reader, getOrdinal, reader.GetString, "central_office_name")

            member __.Read() =
                { id = __.id.Read()
                  import_id = __.import_id.Read()
                  linecard_id = __.linecard_id.Read()
                  linecard_element_id = __.linecard_element_id.Read()
                  category = __.category.Read()
                  ``type`` = __.``type``.Read()
                  name = __.name.Read()
                  status_id = __.status_id.Read()
                  status = __.status.Read()
                  central_office_id = __.central_office_id.Read()
                  central_office_name = __.central_office_name.Read() }
                : equipment

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type house_directionsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.house_id = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "house_id")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.driving_directions = RequiredColumn(reader, getOrdinal, reader.GetString, "driving_directions")

            member __.Read() =
                { house_id = __.house_id.Read()
                  import_id = __.import_id.Read()
                  driving_directions = __.driving_directions.Read() }
                : house_directions

            member __.ReadIfNotNull() =
                if __.house_id.IsNull() then None else Some(__.Read())

        type importReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
            member __.started_at = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "started_at")
            member __.completed_at = OptionColumn(reader, getOrdinal, reader.GetDateTime, "completed_at")
            member __.error_message = OptionColumn(reader, getOrdinal, reader.GetString, "error_message")
            member __.is_latest = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_latest")

            member __.Read() =
                { id = __.id.Read()
                  started_at = __.started_at.Read()
                  completed_at = __.completed_at.Read()
                  error_message = __.error_message.Read()
                  is_latest = __.is_latest.Read() }
                : import

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type linecardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.customer_service_id = OptionColumn(reader, getOrdinal, reader.GetInt32, "customer_service_id")
            member __.structure_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "structure_id")
            member __.linecard_element_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "linecard_element_id")
            member __.linecard_seq = RequiredColumn(reader, getOrdinal, reader.GetInt32, "linecard_seq")
            member __.is_bonded = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_bonded")
            member __.is_left_in = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_left_in")
            member __.status_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "status_id")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetString, "status")
            member __.central_office_id = OptionColumn(reader, getOrdinal, reader.GetInt32, "central_office_id")
            member __.central_office_name = RequiredColumn(reader, getOrdinal, reader.GetString, "central_office_name")

            member __.Read() =
                { id = __.id.Read()
                  import_id = __.import_id.Read()
                  customer_service_id = __.customer_service_id.Read()
                  structure_id = __.structure_id.Read()
                  linecard_element_id = __.linecard_element_id.Read()
                  linecard_seq = __.linecard_seq.Read()
                  is_bonded = __.is_bonded.Read()
                  is_left_in = __.is_left_in.Read()
                  status_id = __.status_id.Read()
                  status = __.status.Read()
                  central_office_id = __.central_office_id.Read()
                  central_office_name = __.central_office_name.Read() }
                : linecard

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type migrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.timestamp = RequiredColumn(reader, getOrdinal, reader.GetInt64, "timestamp")

            member __.Read() =
                { id = __.id.Read()
                  name = __.name.Read()
                  timestamp = __.timestamp.Read() }
                : migration

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type structureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.house_id = OptionColumn(reader, getOrdinal, reader.GetDecimal, "house_id")

            member __.Read() =
                { id = __.id.Read()
                  import_id = __.import_id.Read()
                  house_id = __.house_id.Read() }
                : structure

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type terminalReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.import_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "import_id")
            member __.loop_length = RequiredColumn(reader, getOrdinal, reader.GetInt32, "loop_length")
            member __.pre_post_loop_length = RequiredColumn(reader, getOrdinal, reader.GetInt32, "pre_post_loop_length")

            member __.Read() =
                { id = __.id.Read()
                  import_id = __.import_id.Read()
                  loop_length = __.loop_length.Read()
                  pre_post_loop_length = __.pre_post_loop_length.Read() }
                : terminal

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal tableType =
        let fieldNames = 
            FSharp.Reflection.FSharpType.GetRecordFields(tableType)
            |> Array.map _.Name

        let dictionary = 
            [| 0 .. reader.FieldCount - 1 |] 
            |> Array.map (fun i -> reader.GetName(i), i)
            |> Array.sortBy snd
            |> Array.skip accFieldCount
            |> Array.filter (fun (name, _) -> Array.contains name fieldNames)
            |> Array.take fieldNames.Length
            |> dict
        accFieldCount <- accFieldCount + fieldNames.Length
        fun col -> dictionary.Item col
        
    let lazypublicVersionInfo = lazy (``public``.Readers.VersionInfoReader(reader, buildGetOrdinal typeof<``public``.VersionInfo>))
    let lazypublicaccount_details = lazy (``public``.Readers.account_detailsReader(reader, buildGetOrdinal typeof<``public``.account_details>))
    let lazypubliccustomer_service = lazy (``public``.Readers.customer_serviceReader(reader, buildGetOrdinal typeof<``public``.customer_service>))
    let lazypublicequipment = lazy (``public``.Readers.equipmentReader(reader, buildGetOrdinal typeof<``public``.equipment>))
    let lazypublichouse_directions = lazy (``public``.Readers.house_directionsReader(reader, buildGetOrdinal typeof<``public``.house_directions>))
    let lazypublicimport = lazy (``public``.Readers.importReader(reader, buildGetOrdinal typeof<``public``.import>))
    let lazypubliclinecard = lazy (``public``.Readers.linecardReader(reader, buildGetOrdinal typeof<``public``.linecard>))
    let lazypublicmigration = lazy (``public``.Readers.migrationReader(reader, buildGetOrdinal typeof<``public``.migration>))
    let lazypublicstructure = lazy (``public``.Readers.structureReader(reader, buildGetOrdinal typeof<``public``.structure>))
    let lazypublicterminal = lazy (``public``.Readers.terminalReader(reader, buildGetOrdinal typeof<``public``.terminal>))
    member __.``public.VersionInfo`` = lazypublicVersionInfo.Value
    member __.``public.account_details`` = lazypublicaccount_details.Value
    member __.``public.customer_service`` = lazypubliccustomer_service.Value
    member __.``public.equipment`` = lazypublicequipment.Value
    member __.``public.house_directions`` = lazypublichouse_directions.Value
    member __.``public.import`` = lazypublicimport.Value
    member __.``public.linecard`` = lazypubliclinecard.Value
    member __.``public.migration`` = lazypublicmigration.Value
    member __.``public.structure`` = lazypublicstructure.Value
    member __.``public.terminal`` = lazypublicterminal.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "public.VersionInfo", false -> __.``public.VersionInfo``.Read >> box
        | "public.VersionInfo", true -> __.``public.VersionInfo``.ReadIfNotNull >> box
        | "public.account_details", false -> __.``public.account_details``.Read >> box
        | "public.account_details", true -> __.``public.account_details``.ReadIfNotNull >> box
        | "public.customer_service", false -> __.``public.customer_service``.Read >> box
        | "public.customer_service", true -> __.``public.customer_service``.ReadIfNotNull >> box
        | "public.equipment", false -> __.``public.equipment``.Read >> box
        | "public.equipment", true -> __.``public.equipment``.ReadIfNotNull >> box
        | "public.house_directions", false -> __.``public.house_directions``.Read >> box
        | "public.house_directions", true -> __.``public.house_directions``.ReadIfNotNull >> box
        | "public.import", false -> __.``public.import``.Read >> box
        | "public.import", true -> __.``public.import``.ReadIfNotNull >> box
        | "public.linecard", false -> __.``public.linecard``.Read >> box
        | "public.linecard", true -> __.``public.linecard``.ReadIfNotNull >> box
        | "public.migration", false -> __.``public.migration``.Read >> box
        | "public.migration", true -> __.``public.migration``.ReadIfNotNull >> box
        | "public.structure", false -> __.``public.structure``.Read >> box
        | "public.structure", true -> __.``public.structure``.ReadIfNotNull >> box
        | "public.terminal", false -> __.``public.terminal``.Read >> box
        | "public.terminal", true -> __.``public.terminal``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool, isNullable: bool) =
        let wrapValue get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            elif isNullable then (if reader.IsDBNull ord then System.Nullable() else get ord |> System.Nullable) |> box
            else get ord |> box

        let wrapRef get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box
        
        if t = typedefof<bool> then Some(wrapValue reader.GetBoolean)
        elif t = typedefof<bool[]> then Some(wrapRef reader.GetFieldValue<bool[]>)
        elif t = typedefof<int16> then Some(wrapValue reader.GetInt16)
        elif t = typedefof<int16[]> then Some(wrapRef reader.GetFieldValue<int16[]>)
        elif t = typedefof<int> then Some(wrapValue reader.GetInt32)
        elif t = typedefof<int[]> then Some(wrapRef reader.GetFieldValue<int[]>)
        elif t = typedefof<int64> then Some(wrapValue reader.GetInt64)
        elif t = typedefof<int64[]> then Some(wrapRef reader.GetFieldValue<int64[]>)
        elif t = typedefof<double> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<double[]> then Some(wrapRef reader.GetFieldValue<double[]>)
        elif t = typedefof<decimal> then Some(wrapValue reader.GetDecimal)
        elif t = typedefof<decimal[]> then Some(wrapRef reader.GetFieldValue<decimal[]>)
        elif t = typedefof<string> then Some(wrapRef reader.GetString)
        elif t = typedefof<string[]> then Some(wrapRef reader.GetFieldValue<string[]>)
        elif t = typedefof<System.Guid> then Some(wrapValue reader.GetGuid)
        elif t = typedefof<System.Guid[]> then Some(wrapRef reader.GetFieldValue<System.Guid[]>)
        elif t = typedefof<System.TimeSpan> then Some(wrapRef reader.GetTimeSpan)
        elif t = typedefof<System.TimeSpan[]> then Some(wrapRef reader.GetFieldValue<System.TimeSpan[]>)
        elif t = typedefof<System.DateOnly> then Some(wrapValue reader.GetDateOnly)
        elif t = typedefof<System.DateOnly[]> then Some(wrapRef reader.GetFieldValue<System.DateOnly[]>)
        elif t = typedefof<System.TimeOnly> then Some(wrapValue reader.GetTimeOnly)
        elif t = typedefof<System.TimeOnly[]> then Some(wrapRef reader.GetFieldValue<System.TimeOnly[]>)
        elif t = typedefof<System.DateTime> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateTime[]> then Some(wrapRef reader.GetFieldValue<System.DateTime[]>)
        elif t = typedefof<System.DateTimeOffset> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateTimeOffset[]> then Some(wrapRef reader.GetFieldValue<System.DateTimeOffset[]>)
        elif t = typedefof<byte[]> then Some(wrapRef reader.GetFieldValue<byte[]>)
        elif t = typedefof<char> then Some(wrapRef reader.GetChar)
        elif t = typedefof<char[]> then Some(wrapRef reader.GetFieldValue<char[]>)
        elif t = typedefof<float> then Some(wrapRef reader.GetFloat)
        elif t = typedefof<float[]> then Some(wrapRef reader.GetFieldValue<float[]>)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt, isNullable = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> then t.GenericTypeArguments[0], true, false
                elif t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<System.Nullable<_>> then t.GenericTypeArguments[0], false, true
                else t, false, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt, isNullable) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
